using System;
using System.Runtime.Remoting.Messaging;
using UnityEngine;
using UnityEngine.Events;


namespace Eloi.ColorTelemetry {

    public class UIColorByteMono_Set6ByteColor : MonoBehaviour
    {
        public SixBitsToColorEvent m_sixBitsToColorEvent;

        [ContextMenu("Random Color for testing")]
        public void SetWithRandomColorForTesting()
        {

            for (int i = 0; i < 6; i++)
            {

                m_sixBitsToColorEvent.SetBit(i, SixBitsToColorEvent.GetRandomColor());
            }
        }
        [ContextMenu("Random Color BRGBM for testing")]
        public void SetWithRandomBRGBMColorForTesting()
        {

            for (int i = 0; i < 6; i++)
            {

                m_sixBitsToColorEvent.SetBit(i, SixBitsToColorEvent.GetRandomColorBRGBM(false));
            }


        }
        [ContextMenu("Random Color BRGBM for testing")]
        public void SetWithRandmRGBForTesting()
        {

            for (int i = 0; i < 6; i++)
            {

                m_sixBitsToColorEvent.SetBit(i, SixBitsToColorEvent.GetRandomRGB(false));
            }


        }
    }
    [System.Serializable]
    public class SixBitsToColorEvent
    {
        public UnityEvent<Color> m_colorBit0;
        public UnityEvent<Color> m_colorBit1;
        public UnityEvent<Color> m_colorBit2;
        public UnityEvent<Color> m_colorBit3;
        public UnityEvent<Color> m_colorBit4;
        public UnityEvent<Color> m_colorBit5;



        /// <summary>
        /// White is to bright for the webcam and magenta is really visible for human eyes
        /// </summary>
        public Color m_defaultTrueColor = Color.magenta; 
        public Color m_defaultFalseColor = Color.black;


        public static Color GetRandomColor() { return new Color(UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value, 1); }
        private static Color[] m_brgbm = new Color[] { Color.black, Color.red, Color.green, Color.blue, Color.magenta };
        private static Color[] m_brgbmw = new Color[] { Color.black, Color.red, Color.green, Color.blue, Color.magenta, Color.white };
        private static Color[] m_brgb = new Color[] {  Color.red, Color.green, Color.blue, Color.black, };
        private static Color[] m_brg = new Color[] { Color.red, Color.green, Color.blue, };
        public static Color GetRandomColorBRGBM(bool withWhite=false) {
            if (withWhite) { return m_brgbm[UnityEngine.Random.Range(0, m_brgbmw.Length)]; }
            else { return m_brgbmw[UnityEngine.Random.Range(0, m_brgbm.Length)]; }
        }

        public void SetBit(int index, Color value) {
            switch (index) {
                case 0: m_colorBit0?.Invoke(value); break;
                case 1: m_colorBit1?.Invoke(value); break;
                case 2: m_colorBit2?.Invoke(value); break;
                case 3: m_colorBit3?.Invoke(value); break;
                case 4: m_colorBit4?.Invoke(value); break;
                case 5: m_colorBit5?.Invoke(value); break;
            }
        }

        public void SetBitWithDefault(int index, bool value) { 
        
            SetBit(index, value? m_defaultTrueColor:m_defaultFalseColor);
        }
        public void SetBitWithDefaultRight1ToLeft63(params bool[] bitRightToLeft) {

            for (int i = 0; i < bitRightToLeft.Length; i++)
            {
                if (i == 0) m_colorBit0.Invoke(GetDefaultColorFor( bitRightToLeft[i] ) );
                else if (i == 1) m_colorBit1.Invoke(GetDefaultColorFor(bitRightToLeft[i]));
                else if (i == 2) m_colorBit2.Invoke(GetDefaultColorFor(bitRightToLeft[i]));
                else if (i == 3) m_colorBit3.Invoke(GetDefaultColorFor(bitRightToLeft[i]));
                else if (i == 4) m_colorBit4.Invoke(GetDefaultColorFor(bitRightToLeft[i]));
                else if (i == 5) m_colorBit5.Invoke(GetDefaultColorFor(bitRightToLeft[i]));
            }
        }

        private Color GetDefaultColorFor(bool isTrue)=> isTrue?m_defaultTrueColor:m_defaultFalseColor;

        public void SetAsByteWithDefault(byte byteValue)
        {

            // Generated by 🤖 to verify.
            // Convert byte to 6 bits (right to left: bit 0 is LSB, bit 5 is bit 5)
            bool[] bytesAsBitRightToLeft = new bool[6];
            for (int i = 0; i < 6; i++)
            {
                bytesAsBitRightToLeft[i] = ((byteValue >> i) & 0x01) != 0;
            }
            SetBitWithDefaultRight1ToLeft63(bytesAsBitRightToLeft);
        }

        public static Color GetRandomRGB(bool allowBlack = false)
        {
            return GetRandomOfColorArray( allowBlack ? m_brgb: m_brg);
        }

        private static Color GetRandomOfColorArray(in Color[] colorArray)
        {
            return colorArray[UnityEngine.Random.Range(0,colorArray.Length)];
        }
    }

}